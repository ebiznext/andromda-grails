##author stephane.manciot@ebiznext.com
#set($indent ="    ")
//
//     Attention: Generated code! Do not modify by hand!
//     Generated by: AbstractPersistenceTestCase.vsl in andromda-grails-cartridge.
#set ($generatedFile = "AbstractPersistenceTestCase.groovy")
#if($stringUtils.isNotEmpty($customTypesPackage))
package $customTypesPackage
#set ($generatedFile = "${stringUtils.replace($customTypesPackage,'.','/')}/${generatedFile}")
#end

import grails.test.GrailsUnitTestCase
import groovy.lang.ExpandoMetaClass
import groovy.lang.ExpandoMetaClassCreationHandle
import groovy.lang.GroovyClassLoader
import groovy.lang.GroovySystem
import org.codehaus.groovy.grails.commons.ApplicationHolder
import org.codehaus.groovy.grails.commons.DefaultGrailsApplication
import org.codehaus.groovy.grails.commons.GrailsApplication
import org.codehaus.groovy.grails.commons.spring.DefaultRuntimeSpringConfiguration
import org.codehaus.groovy.grails.commons.spring.GrailsRuntimeConfigurator
import org.codehaus.groovy.grails.plugins.datasource.DataSourceGrailsPlugin
import org.codehaus.groovy.grails.plugins.i18n.I18nGrailsPlugin
import org.codehaus.groovy.grails.support.MockApplicationContext
import org.hibernate.Session
import org.hibernate.SessionFactory
import org.springframework.context.ApplicationContext
import org.springframework.context.support.StaticMessageSource
import org.springframework.orm.hibernate3.SessionFactoryUtils
import org.springframework.orm.hibernate3.SessionHolder
import org.springframework.transaction.TransactionStatus
import org.springframework.transaction.support.AbstractPlatformTransactionManager
import org.springframework.transaction.support.DefaultTransactionDefinition
import org.springframework.transaction.support.TransactionSynchronizationManager
import org.codehaus.groovy.grails.plugins.*

import java.io.InputStream
import java.io.IOException

import java.sql.SQLException
import java.text.SimpleDateFormat

abstract class AbstractPersistenceTestCase extends GrailsUnitTestCase {
    GroovyClassLoader gcl = new GroovyClassLoader(this.getClass().classLoader)
    MockApplicationContext ctx
    ApplicationContext appCtx
    AbstractPlatformTransactionManager transactionManager
    /**
     * Statut de la transaction englobante
     */
    private TransactionStatus transactionStatus
    /**
     * 
     */
    boolean commit
    SessionFactory sessionFactory
    Session session

    protected void setUp() {
        super.setUp()

        ExpandoMetaClass.enableGlobally()

        GroovySystem.metaClassRegistry.metaClassCreationHandle = new ExpandoMetaClassCreationHandle()

        gcl.parseClass('''
dataSource {
${indent}pooled = true
#if ($stringUtils.isNotBlank($driver))
${indent}driverClassName = "$driver"
#end
#if ($stringUtils.isNotBlank($connectionUrl))
${indent}url = "$connectionUrl"
#end
#if ($stringUtils.isNotBlank($username))
${indent}username = "$username"
#end
#if ($stringUtils.isNotBlank($password))
${indent}password = "$password"
#end
#if ($stringUtils.isNotBlank($hibernateDialect))
${indent}dialect = "$hibernateDialect"
#end
#if ($stringUtils.isNotBlank($hibernateShowSql))
${indent}logSql = "$hibernateShowSql"
#end
}
hibernate {
#if ($stringUtils.isNotBlank($hibernatePoolSize))
${indent}pool.size = "$hibernatePoolSize"
#end
#if ($stringUtils.isNotBlank($hibernateTransactionManagerStrategy))
${indent}transaction.manager.strategy = "$hibernateTransactionManagerStrategy"
#end
#if ($stringUtils.isNotBlank($hibernateUserTransactionName))
${indent}jta.UserTransaction = "$hibernateUserTransactionName"
#end
#if ($stringUtils.isNotBlank($hibernateTransactionManagerLookup))
${indent}transaction.manager_lookup_class = "$hibernateTransactionManagerLookup"
#end
#if ($stringUtils.isNotBlank($hibernateUseOuterJoin))
${indent}use_outer_join = "$hibernateUseOuterJoin"
#end
##if ($stringUtils.isNotBlank($hibernateShowSql))
##${indent}show_sql = "$hibernateShowSql"
##end
#if ($stringUtils.isNotBlank($hibernateJndiName))
${indent}session_factory_name = "$hibernateJndiName"
#end
##if ($stringUtils.isNotBlank($hibernateDialect))
##${indent}dialect = "$hibernateDialect"
##end
#if ($stringUtils.isNotBlank($hibernateDefaultSchema))
${indent}default_schema = "$hibernateDefaultSchema"
#end
#if ($stringUtils.isNotBlank($hibernateMaxFetchDepth))
${indent}max_fetch_depth = "$hibernateMaxFetchDepth"
#end
#if ($stringUtils.isNotBlank($hibernateJdbcFetchSize))
${indent}jdbc.fetch_size = "$hibernateJdbcFetchSize"
#end
#if ($stringUtils.isNotBlank($hibernateJdbcBatchSize))
${indent}jdbc.batch_size = "$hibernateJdbcBatchSize"
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseScrollableResultSet))
${indent}jdbc.use_scrollable_resultset = "$hibernateJdbcUseScrollableResultSet"
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseStreamsForBinary))
${indent}use_streams_for_binary = "$hibernateJdbcUseStreamsForBinary"
#end
##if ($stringUtils.isNotBlank($hibernateHbm2DDLAuto))
##${indent}hbm2ddl.auto = "$hibernateHbm2DDLAuto"
###end
#if ($stringUtils.isNotBlank($hibernateQuerySubstitutions))
${indent}query.substitutions = "$hibernateQuerySubstitutions"
#end
#if ($stringUtils.isNotBlank($hibernateEnableCache))
${indent}cache.use_query_cache = "$hibernateEnableCache"
#end
#if ($stringUtils.isNotBlank($hibernateCacheProvider))
${indent}cache.provider_class = "$hibernateCacheProvider"
#end
#if ($stringUtils.isNotBlank($hibernateQueryCacheFactory))
${indent}cache.query_cache_factory = "$hibernateQueryCacheFactory"
#end
#if ($stringUtils.isNotBlank($hibernateConnectionReleaseMode))
${indent}connection.release_mode = "$hibernateConnectionReleaseMode"
#end
// database hibernateProperties merge-point
}
''', "DataSource")

        ctx = new MockApplicationContext()

        def classes = getDomainClasses()

        gcl.getLoadedClasses().each {
            classes << it
        }

        def ga = new DefaultGrailsApplication(classes as Class[], gcl)
        def mockManager = new MockGrailsPluginManager(ga)
        ctx.registerMockBean("manager", mockManager)
        PluginManagerHolder.setPluginManager(mockManager)

        def dependentPlugins = [
                DataSourceGrailsPlugin,
                DomainClassGrailsPlugin,
                I18nGrailsPlugin,
                MockHibernateGrailsPlugin
        ].collect { new DefaultGrailsPlugin(it, ga)}

        dependentPlugins.each { mockManager.registerMockPlugin(it); it.manager = mockManager }
        mockManager.doArtefactConfiguration()
        ctx.registerMockBean(PluginMetaManager.BEAN_ID, new DefaultPluginMetaManager())

        ga.initialise()
        ga.setApplicationContext(ctx)
        ApplicationHolder.setApplication(ga)
        ctx.registerMockBean(GrailsApplication.APPLICATION_ID, ga)
        ctx.registerMockBean("messageSource", new StaticMessageSource())

        def springConfig = new DefaultRuntimeSpringConfiguration(ctx, gcl)
        dependentPlugins*.doWithRuntimeConfiguration(springConfig)

        appCtx = springConfig.getApplicationContext()
        dependentPlugins*.doWithApplicationContext(appCtx)

        mockManager.applicationContext = appCtx
        mockManager.doDynamicMethods()

        sessionFactory = appCtx.getBean(GrailsRuntimeConfigurator.SESSION_FACTORY_BEAN)

        transactionManager = appCtx.getBean(GrailsRuntimeConfigurator.TRANSACTION_MANAGER_BEAN)
        commit = false
        try {
            log.info("Ouverture d'une transaction pour le test")
            transactionStatus = transactionManager.getTransaction(new DefaultTransactionDefinition())
        }
        catch (Exception ex) {
            log.info("Echec d'ouverture d'une transaction pour le test -> " + ex.getMessage())
        }
        
        if (!TransactionSynchronizationManager.hasResource(sessionFactory)) {
            session = sessionFactory.openSession()
            TransactionSynchronizationManager.bindResource(sessionFactory, new SessionHolder(session))
        }
    }

    List getDomainClasses(){
		return [
#set($first = "true")
#foreach($entity in $entities)
		    #if($first == "false"),#else#set($first = "false")#end#if ($stringUtils.isNotBlank($entity.packageName))${entity.packageName}.#end${entity.entityName}
#end
		]
	}

    protected void tearDown() {
        try {
            if (commit) {
                log.info("Commit de la transaction pour le test")
                transactionManager.commit(transactionStatus)
            }
            else {
                log.info("Rollback de la transaction pour le test")
                transactionManager.rollback(transactionStatus)
            }
        }
        catch (Exception ex) {
            if (commit) {
                log.info("Echec du commit de la transaction pour le test -> " + ex.getMessage())
            }
            else {
                log.info("Echec du rollback de la transaction pour le test -> " + ex.getMessage())
            }
        }
        if (TransactionSynchronizationManager.hasResource(this.sessionFactory)) {
            SessionHolder holder = (SessionHolder) TransactionSynchronizationManager.getResource(this.sessionFactory)
            org.hibernate.Session s = holder.getSession()
            //s.flush()
            TransactionSynchronizationManager.unbindResource(this.sessionFactory)
            SessionFactoryUtils.releaseSession(s, this.sessionFactory)
        }

        ApplicationHolder.setApplication(null)
        ExpandoMetaClass.disableGlobally()
        PluginManagerHolder.setPluginManager(null)

        super.tearDown()
    }

    /**
     * @param classe
     *            -
     * @param path
     *            -
     */
    protected void runSqlFile(Class classe, String path)
    {
        runSqlFile(classe.getResourceAsStream(path))
    }

    /**
     * @param classe
     *            -
     * @param path
     *            -
     * @param params
     *            -
     */
    protected void runSqlFile(Class classe, String path, Object... params)
    {
        runSqlFile(classe.getResourceAsStream(path), params)
    }

    /**
     * Allows the execution of the queries contained in the file whose path is supplied as a parameter
     * and is related to the class AbstractPersistenceTestCase
     * 
     * @param path
     *            -
     */
    protected void runSqlFile(String path)
    {
        runSqlFile(AbstractPersistenceTestCase.class.getResourceAsStream("/" + path))
    }

    /**
     * Allows the execution of the queries contained in the file whose path is supplied as a parameter 
     * and is related to the class AbstractPersistenceTestCase
     * 
     * @param path
     *            -
     * @param params
     *            -
     */
    protected void runSqlFile(String path, Object... params)
    {
        runSqlFile(AbstractPersistenceTestCase.class.getResourceAsStream("/" + path), params)
    }

    /**
     * Allows the execution of the queries contained in the input. The requests are separated by a ";"
     * 
     * @param input
     *            -
     * @param params
     *            -
     */
    protected void runSqlFile(InputStream input, Object... params)
    {
        StringBuffer contenu = null

        try
        {
            contenu = readInput(input)
        }
        catch (IOException ex)
        {
            fail(ex.getMessage())
        }

        String[] tabSQL = contenu.toString().split(";")
        for (String sql : tabSQL)
        {
            if (sql.trim().length() > 0)
            {
                for (int i = 0; i < params.length; i++)
                {
                    StringBuffer str = new StringBuffer("\\{").append(i).append("\\}")
                    String valeurParam = ""
                    if (params[i] != null)
                    {
                        if (params[i] instanceof Calendar)
                        {
                            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yy HH:mm:ss")
                            valeurParam = format.format(((Calendar) params[i]).getTime())
                        }
                        else
                        {
                            valeurParam = params[i].toString()
                        }
                    }
                    sql = sql.replaceAll(str.toString(), valeurParam)
                }
                try
                {
                    getSession().connection().prepareStatement(sql.trim()).execute()
                }
                catch (SQLException ex)
                {
                    fail(ex.getMessage())
                }
            }
        }
    }

    /**
     * 
     * @param input
     *            - input stream
     * @return {@link StringBuffer}
     * @throws IOException
     *             -
     */
    private StringBuffer readInput(InputStream input) throws IOException {
        StringBuffer resultat = new StringBuffer()
        byte[] buf = new byte[1024]
        int i = 0
        while ((i = input.read(buf)) != -1) {
            resultat.append(new String(buf, 0, i))
        }
        return resultat
    }

    /**
     * @return {@link Session}
     */
    private Session getSession()
    {
        return sessionFactory.getCurrentSession()
    }

}
