##author stephane.manciot@ebiznext.com
#set ($generatedFile = "${service.packagePath}/${service.baseName}.groovy")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: GrailsServiceBase.vsl in andromda-grails-cartridge.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

/**
 * <p>
 * Spring Service base class for <code>$service.fullyQualifiedInterfaceName</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see $service.fullyQualifiedInterfaceName
 */
abstract class ${service.baseName}
#if($service.generalization)
    extends $service.generalization.fullyQualifiedImplementationName
#end
    implements ${service.fullyQualifiedInterfaceName}
{

#if($service.webService)
	static expose = ['$soapStack']

#end
#foreach($serviceRef in $service.serviceReferences)
#set ($targetElement = $serviceRef.targetElement)
    $targetElement.fullyQualifiedInterfaceName $serviceRef.name

#end
#foreach ($operation in $service.implementationOperations)
    /**
     * @see ${service.fullyQualifiedInterfaceName}#${operation.getSignature(false)}
     */
    $operation.visibility $operation.returnType.fullyQualifiedName $operation.signature
#if ($operation.exceptionsPresent)
        $operation.throwsClause
#end
    {
#if ($requiredCheckEnabled)
#foreach ($argument in $operation.arguments)
#if ($argument.required && !$argument.type.primitive)
#if (!$argument.type.stringType)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${service.fullyQualifiedName}.${operation.signature} - '${argument.name}' can not be null");
        }
#else
        if ($argument.name == null || ${argument.name}.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "${service.fullyQualifiedName}.${operation.signature} - '${argument.name}' can not be null or empty");
        }
#end
#if (!$argument.type.enumeration && !$argument.type.entityMetaType)
#foreach ($attribute in $argument.type.attributes)
#if ($attribute.required && !$attribute.type.primitive)
#if (!$attribute.type.stringType)
        if (${argument.name}.get${stringUtils.capitalize($attribute.name)}() == null)
        {
            throw new IllegalArgumentException(
                "${service.fullyQualifiedInterfaceName}.${operation.signature} - '$argument.name.$attribute.name' can not be null");
        }
#else
        if (${argument.name}.get${stringUtils.capitalize($attribute.name)}() == null || ${argument.name}.get${stringUtils.capitalize($attribute.name)}().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "${service.fullyQualifiedInterfaceName}.${operation.signature} - '$argument.name.$attribute.name' can not be null or empty");
        }
#end
#end
#end
#end
#end
#end
#end
#if ($operation.constraintsPresent)
        this.$operation.preconditionCall;
#end
        try
        {
#set ($call = "this.${operation.implementationCall};")
#if ($operation.returnTypePresent)
            return $call
#else
            $call
#end
        }
#foreach($exception in $operation.exceptions)
        catch ($exception.fullyQualifiedName ex)
        {
            throw ex;
        }
#end
        catch (Throwable th)
        {
            throw new ${service.fullyQualifiedDefaultExceptionName}(
                "Error performing '${service.fullyQualifiedName}.${operation.signature}' --> " + th,
                th);
        }
    }

#if ($operation.constraintsPresent)
    /**
     * Performs any precondition checks for {@link #${operation.call}}.
     */
    private void $operation.preconditionSignature
    {
#renderPreconditions($operation)
    }

#end
     /**
      * Performs the core logic for {@link #${operation.getSignature(false)}}
      */
    protected abstract $operation.returnType.fullyQualifiedName $operation.implementationSignature
        throws java.lang.Exception;

#end
}