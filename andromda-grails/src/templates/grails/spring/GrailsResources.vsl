##author stephane.manciot@ebiznext.com
#set($indent ="    ")
//
//     Attention: Generated code! Do not modify by hand!
//     Generated by: GrailsResources.vsl in andromda-grails-cartridge.
import grails.rest.render.json.JsonCollectionRenderer
import grails.rest.render.json.JsonRenderer

beans = {
#set ($daoRefsEnabled = !$entities.empty)
#set ($daosEnabled = $daosEnabled && !$entities.empty)
#if ($stringUtils.isNotBlank($transactionManager))
${indent}transactionManager($transactionManager) {
#if ($transactionManager.indexOf('HibernateTransactionManager') != -1)
${indent}${indent}sessionFactory = ref("sessionFactory")
#elseif ($transactionManager.indexOf('DataSourceTransactionManager') != -1)
${indent}${indent}dataSource = ref("dataSource")
#else
#if ($stringUtils.isNotBlank($userTransactionName))
${indent}${indent}userTransactionName = '$userTransactionName'
#end
#if ($stringUtils.isNotBlank($transactionManagerName))
${indent}${indent}transactionManagerName = '$transactionManagerName'
#end
#end
${indent}}
#end

${indent}hibernateInterceptor(org.springframework.orm.hibernate3.HibernateInterceptor) {
${indent}${indent}sessionFactory = ref("sessionFactory")
${indent}}

#set ($enableSpringTransactions = !$services.empty)
#if ($enableSpringTransactions)
${indent}serviceTransactionInterceptor(org.springframework.transaction.interceptor.TransactionInterceptor) {
${indent}${indent}transactionManager = ref("transactionManager")
##${indent}${indent}transactionAttributeSource = [
###set ($first = "true")
###foreach ($service in $services)
###foreach ($operation in $grailsUtils.filterUniqueByName($service.implementationOperations))
##${indent}${indent}${indent}#if($first == "false"),#end#set($first = "false")'${service.fullyQualifiedName}.${operation.name}':'${operation.transactionType}'
###end
###end
##${indent}${indent}]
${indent}${indent}transactionAttributeSource = 
#foreach ($service in $services)
#foreach ($operation in $grailsUtils.filterUniqueByName($service.implementationOperations))
${indent}${indent}${indent}"${service.fullyQualifiedInterfaceName}.${operation.name}=${operation.transactionType}"
#end
#end
${indent}}
#end

#foreach($service in $services)
#set ($first = "true")
${indent}$stringUtils.uncapitalize($stringUtils.trimToEmpty($service.name))(org.springframework.aop.framework.ProxyFactoryBean){
${indent}${indent}target = { ${service.fullyQualifiedImplementationName} s ->
#foreach($serviceRef in $service.allServiceReferences)
#if (!$serviceRef.circularReference)
${indent}${indent}${indent}$serviceRef.name = ref("$stringUtils.uncapitalize($stringUtils.trimToEmpty($serviceRef.targetElement.name))")
#end
#end
            // $stringUtils.uncapitalize($stringUtils.trimToEmpty($service.name)) merge-point
${indent}${indent}}
${indent}${indent}proxyInterfaces = ['${service.fullyQualifiedInterfaceName}']
${indent}${indent}interceptorNames = [
#if ($acegiServiceSecurity)
${indent}${indent}${indent}#if($first == "false"),#end#set($first = "false")'serviceSecurityInterceptor'
#end
#if ($enableSpringTransactions)
${indent}${indent}${indent}#if($first == "false"),#end#set($first = "false")'serviceTransactionInterceptor'
#end
#if ($daosEnabled && $service.hibernateInterceptorEnabled)
${indent}${indent}${indent}#if($first == "false"),#end#set($first = "false")'hibernateInterceptor'
#end
#foreach($interceptor in $service.interceptors)
${indent}${indent}${indent}#if($first == "false"),#end#set($first = "false")'$interceptor'
#end
${indent}${indent}]
${indent}}
#end

#foreach($entity in $entities)
${indent}$stringUtils.uncapitalize($stringUtils.trimToEmpty(${entity.entityName}))Renderer(Jsonrenderer, ${entity.entityName}){
${indent}${indent}excludes = ['class']
${indent}}
${indent}$stringUtils.uncapitalize($stringUtils.trimToEmpty(${entity.entityName}))CollectionRenderer(JsonCollectionrenderer, ${entity.entityName}){
${indent}${indent}excludes = ['class']
${indent}}
#end

${indent}loadBeans("classpath:*defaultResources.groovy")
// beans merge-point

}
