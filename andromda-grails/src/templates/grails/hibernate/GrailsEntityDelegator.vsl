##
##  author: stephane.manciot@ebiznext.com
##        
#set($indent ="    ")
#set($generatedFile = "${entity.packagePath}/${entity.entityName}Delegator.groovy")
// license-header java merge-point
//
// Generated by: GrailsEntityDelegator.vsl in andromda-grails-cartridge.
//
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
/**
 *
 */
class ${entity.entityName}Delegator 
#if($entity.generalization)
${indent}extends ${entity.generalization.fullyQualifiedEntityName}Delegator
#end
${indent}implements java.io.Serializable
{
${indent}private ${entity.fullyQualifiedName} entity

${indent}protected ${entity.entityName}Delegator(${entity.fullyQualifiedName} entity){
#if($entity.generalization)
${indent}${indent}super(entity)
#end
${indent}${indent}this.entity = entity
${indent}}
## events
${indent}def beforeInsert = {
${indent}${indent}// your implementation goes here
${indent}}

${indent}def beforeUpdate = {
${indent}${indent}// your implementation goes here
${indent}}

${indent}def beforeDelete = {
${indent}${indent}// your implementation goes here
${indent}}

${indent}def onLoad = {
${indent}${indent}// your implementation goes here
${indent}}

##json renderer
#set ($renderUtil = "json.RenderUtil")
#if($stringUtils.isNotEmpty($customTypesPackage))
#set ($renderUtil = "${customTypesPackage}.json.RenderUtil")
#end
${indent}java.util.Map asMapForJSON() {return ${renderUtil}.asMapForJSON(entity)}

## entity toValueObject methods
#set ($daoInheritance = $entity.generalization && $daoInheritanceEnabled)
#if ($daoInheritance)
#set ($valueObjectReferences = $grailsUtils.getValueObjectReferences($entity, false))
#else
#set ($valueObjectReferences = $grailsUtils.getValueObjectReferences($entity, true))
#end
#foreach ($valueObjectRef in $valueObjectReferences)

#set($transformationMethodName = "to$stringUtils.capitalize(${valueObjectRef.name})")
${indent}def ${valueObjectRef.targetElement.fullyQualifiedName} ${transformationMethodName}(final ${valueObjectRef.targetElement.fullyQualifiedName} target)
${indent}{
${indent}${indent}// your implementation goes here
${indent}${indent}return target
${indent}}
#end

## entity custom static validators
#foreach ($attribute in $entity.attributes)
#if($grailsUtils.hasCustomValidator($attribute))
#set($customValidatorName = "$grailsUtils.getCustomValidatorName($entity, $attribute)")
#set($customValidatorClosure = "$grailsUtils.getDefaultCustomValidatorClosure($entity, $attribute)")
${indent}def static ${customValidatorName} = ${customValidatorClosure}
#end
#end
#foreach ($sourceEnd in $entity.associationEnds)
#set ($otherEnd = $sourceEnd.otherEnd)
#if($grailsUtils.hasCustomValidator($otherEnd))
#if ($otherEnd.navigable && !$otherEnd.transient)
#if ($sourceEnd.one2One || $sourceEnd.many2One)
#if (!$otherEnd.aggregation && !$otherEnd.composition)
#set($customValidatorName = "$grailsUtils.getCustomValidatorName($entity, $otherEnd)")
#set($customValidatorClosure = "$grailsUtils.getDefaultCustomValidatorClosure($entity, $otherEnd)")
${indent}def static ${customValidatorName} = ${customValidatorClosure}
#end
#end
#end
#end
#end

## entity custom finders
#set ($queryOperations = $entity.queryOperations)
#foreach ($finder in $queryOperations)
#if(!$finder.criteriaFinder && ($finder.abstract || $finder.static))
#set ($returnType = $finder.returnType.fullyQualifiedName)
#set ($namedParameters = $stringUtils.isNotBlank($finder.findTaggedValue('@andromda.hibernate.query')))
    static $returnType ${finder.name}(${finder.getTypedArgumentList('final')})
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
${indent}{
${indent}${indent}// your implementation goes here
${indent}}

#end
#end
## entity business operations
#foreach ($operation in $entity.allBusinessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
$operation.getDocumentation("     * ")
     */
#if ($operation.exceptionsPresent)
${indent}$operation.visibility $returnType.fullyQualifiedName $signature
${indent}${indent}throws $operation.exceptionList {
#else
${indent}$operation.visibility $returnType.fullyQualifiedName $signature {
#end
${indent}${indent}// your implementation goes here
${indent}}

#end
## entity toString
#set($entityName = "")
#if ($stringUtils.isNotBlank($entity.packageName))
#set($entityName = "${entity.packageName}.${entity.entityName}")
#else
#set($entityName = "${entity.entityName}")
#end
#if(!$entity.getIdentifiers(true).empty)
#if (!$entity.compositeIdentifier)
#set ($primaryKey = $entity.getIdentifiers(true).iterator().next())
#set ($primaryKeyTypeName = $primaryKey.type.fullyQualifiedName)
#if ($primaryKey.name != 'id')
${indent}String toString(){return "${entityName} : "+entity.$primaryKey.name}
#else
${indent}String toString(){return "${entityName} : "+entity.id}
#end
#else
#set($i = 0)
${indent}String toString(){return "${entityName} : ["+#foreach ($identifier in $entity.identifiers)#if($i != 0)+","+#end
entity.$!{identifier.name}#set($i = 1)#end+"]"}
#end
#end
}
