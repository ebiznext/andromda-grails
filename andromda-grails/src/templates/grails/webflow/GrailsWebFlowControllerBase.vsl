##author stephane.manciot@ebiznext.com
#parse("templates/grails/webflow/action.vm")
#set($indent ="    ")
#set ($generatedFile = "${controller.packagePath}/${controller.name}Base.groovy")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: GrailsWebFlowControllerBase.vsl in andromda-grails-cartridge.
//
#if ($stringUtils.isNotBlank($controller.packageName))
package $controller.packageName;
#end

import org.springframework.webflow.core.collection.LocalAttributeMap
import org.springframework.webflow.execution.Event

abstract class ${controller.name}Base
{
## web flow 
#set($useCase = $controller.useCase)
#if($useCase)
## the controller service references
#foreach($service in $controller.serviceReferences)
#set($serviceRef = $grailsUtils.normalizeWebFlowName(${service.name}))
    def transient $serviceRef
#end
## GRAILS-3133
    def transient sessionFactory
    def $grailsUtils.getWebFlowName(${useCase.name}) = {
## the web flow is described using an activity graph
#set($webFlow = $useCase.activityGraph)
#if($webFlow)
## an initial state denotes the starting point of the use-case, it can have no incoming transitions and only one outgoing transition. 
## Only a single initial state is allowed per activity graph.
#set($start = $webFlow.initialState)
#if($start)
        start{
            action{}
#getTargetedAction($start)
#set($webFlowStateName = $grailsUtils.normalizeWebFlowStateName(${__targetedAction.name}))
            on('success').to('${webFlowStateName}')
        }
#end
## handle action and view states
#foreach ($actionState in $webFlow.actionStates)
## on exclut les final states qui sont traites plus bas
#if(!$actionState.isFrontEndFinalStateMetaType())
        $grailsUtils.normalizeWebFlowStateName(${actionState.name}) {
## view state
#if($actionState.frontEndView)
## handle transitions
#foreach($action in $actionState.actions)
#set ($trigger = $action.trigger)
#set ($triggerKey = $stringUtils.toResourceMessageKey($trigger.name))
#getTargetedAction($action)
#set($webFlowStateName = $grailsUtils.normalizeWebFlowStateName(${__targetedAction.name}))
            on('${triggerKey}').to('${webFlowStateName}')
#end
#else
## action state
            action{
                def c = ${controller.name}.${grailsUtils.normalizeWebFlowStateName(${actionState.name})}Action.clone()
                c.delegate = delegate
                c.resolveStrategy = Closure.DELEGATE_FIRST
                def ret = c.call(params, log)
                if(ret instanceof Map){
                    flow.putAll(new LocalAttributeMap(ret))
                    return action.success()
                }
                else if (ret instanceof Event){
                    return ret
                }
                else {
                    return action.result(ret.toString())
                }
            }
## handle events
#getTargetedAction($actionState)
#if($__targetedAction.decisionPoint)
#foreach($outgoing in $__targetedAction.outgoing)
#getTargetedAction($outgoing)
#set($webFlowStateName = $grailsUtils.normalizeWebFlowStateName(${__targetedAction.name}))
#if($outgoing.frontEndException)
#set($exceptionType = $grailsUtils.getExceptionType(${outgoing}))
            on($exceptionType).to('${webFlowStateName}')
#else
#set ($guard = $outgoing.guard)
#set($triggerKey = $stringUtils.toResourceMessageKey($guard.name))
            on('${triggerKey}').to('${webFlowStateName}')
#end
#end
#else
#foreach($outgoing in $actionState.outgoing)
#if(!$outgoing.frontEndException)
#getTargetedAction($outgoing)
#set($triggerKey = $grailsUtils.getTriggerKey($actionState))
#set($webFlowStateName = $grailsUtils.normalizeWebFlowStateName(${__targetedAction.name}))
            on('${triggerKey}').to('${webFlowStateName}')
#end
#end
#end
## handle exceptions
#foreach($exception in $actionState.exceptions)
#set($exceptionType = $grailsUtils.getExceptionType(${exception}))
#getTargetedAction($exception)
#set($webFlowStateName = $grailsUtils.normalizeWebFlowStateName(${__targetedAction.name}))
            on($exceptionType).to('${webFlowStateName}')
#end
#end
        }
#end
#end
## handle final states
#foreach($finalState in $webFlow.finalStates)
#set($webFlowStateName = $grailsUtils.normalizeWebFlowStateName(${finalState.name}))
#set($__targetedUseCase = $finalState.targetUseCase)
#set($__targetedController = $__targetedUseCase.controller)
#if($__targetedController)
        ${webFlowStateName} { redirect(controller:'${grailsUtils.normalizeWebFlowControllerName(${__targetedController.name})}') }
#end
#end
#end
    }
#end
}
