##author stephane.manciot@ebiznext.com
#set($indent ="    ")
//
//     Generated by: RenderUtil.vsl in andromda-grails-cartridge.
#set ($generatedFile = "RenderUtil.groovy")
#if($stringUtils.isNotEmpty($customTypesPackage))
package ${customTypesPackage}.json
#set ($generatedFile = "${stringUtils.replace($customTypesPackage,'.','/')}/json/${generatedFile}")
#else
package json
#set ($generatedFile = "json/${generatedFile}")
#end

import java.text.SimpleDateFormat
import java.util.HashMap
import java.util.Map
import org.apache.commons.beanutils.PropertyUtilsBean 
import org.hibernate.collection.AbstractPersistentCollection 

class RenderUtil {
    
    static SimpleDateFormat sdf = new SimpleDateFormat('dd/MM/yyyy HH:mm')

    /**
     *  convert object into map for json renderer
     *
     * @param object the object to render
     * @return  map for json renderer
     */
    public static Map asMapForJSON(object) {
        return asMapForJSON(null, [], [], object)
    }
    
    /**
     * convert object into map for json renderer
     *
     * @param included the included properties list
     * @param object the object to render
     * @return map for json renderer
     */
    
    public static Map asMapForJSON(included, object) {
        return asMapForJSON(null, included, [], object)
    }
    
    /**
     * convert object into map for json renderer
     *
     * @param property the current property
     * @param included the included properties list
     * @param excluded the exclued properties list
     * @param object the object to render
     * @return  map for json renderer
     */
    public static Map asMapForJSON(property, included, excluded, object) {
        def map = new HashMap()
        def propertyUtilsBean = PropertyUtilsBean.getInstance()
        propertyUtilsBean.describe(object).collect { key, value ->
            
            if(!(key.equals("metaClass") || key.equals("hibernateLazyInitializer"))){
                def currentProperty
                if(property == null){
                    currentProperty = key
                }
                else{
                    currentProperty = property+'.'+key
                }
                
                if(included == null || included.size() == 0 || included.contains(currentProperty)){
                    if(excluded == null || excluded.size() == 0|| !excluded.contains(currentProperty)){
                        if(value instanceof AbstractPersistentCollection) {
                            def valueList  = new ArrayList()
                            value.each { val ->
                                valueList.add (asMapForJSON(currentProperty, included, excluded, val))
                            }
                            map.put(key,valueList)
                        }else if(value== null || isPrimitiveType(value.class) || value instanceof java.lang.Enum) {
                            map.put(key, value)
                        }
                        else if(value instanceof Calendar ) {
                            map.put(key, sdf.format(value.getTime()))
                        }
                        else if (value!= null){
                            def map2 = asMapForJSON(currentProperty, included, excluded, value)
                            map.put(key,map2)
                        }
                    }
                }
            }
        }
        return map
    }
    
    /**
     * test if the object type is primitive
     * @param type
     * @return
     */
    public static boolean isPrimitiveType(Class<?> type) {
        if (type.isArray()) {
            return isPrimitiveType(type.getComponentType());
        }
        else {
            return Boolean.class.equals(type) ||
            Integer.class.equals(type) ||
            Character.class.equals(type) ||
            Byte.class.equals(type) ||
            Short.class.equals(type) ||
            Double.class.equals(type) ||
            Long.class.equals(type) ||
            Float.class.equals(type) ||
            String.class.equals(type)
        }
    }
    
}
